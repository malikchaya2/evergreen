command_type: test
stepback: true
ignore:
  - "*.md" # don't schedule tests if a commit only changes markdown files
  - "scripts/*" # our scripts are untested, so don't schedule tests for them
  - ".github/*" # github CODEOWNERS configuration

post:
  - func: attach-test-results
  - command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        [
          "gopath/src/github.com/evergreen-ci/evergreen/bin/output.*.coverage.html",
        ]
      remote_file: evergreen/${task_id}/
      bucket: mciuploads
      content_type: text/html
      permissions: public-read
      display_name: "(html) coverage:"
  - command: s3.put
    type: system
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_files_include_filter:
        ["gopath/src/github.com/evergreen-ci/evergreen/bin/output.*.coverage"]
      remote_file: evergreen/${task_id}/
      bucket: mciuploads
      content_type: text/plain
      permissions: public-read
      display_name: "(txt) coverage:"

#######################################
#         YAML Templates              #
#######################################
variables:
  - &run-build
    # runs a build operations. The task name in evergreen should
    # correspond to a make target for the build operation.
    name: test
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: run-make
        vars: { target: "${task_name}" }
      - command: s3.put
        type: system
        params:
          optional: true
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: gopath/src/github.com/evergreen-ci/evergreen/bin/dist.tar.gz
          remote_file: evergreen/${build_id}-${build_variant}/evergreen-${task_name}-${revision}.tar.gz
          bucket: mciuploads
          content_type: application/x-gzip
          permissions: public-read
          display_name: dist.tar.gz
  - &run-go-test-suite
    # runs a make target and then uploads gotest output to
    # evergreen. The test name should correspond to a make target for
    # that suite
    name: test
    must_have_test_results: true
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - &run-go-test-suite-with-docker
    name: test
    must_have_test_results: true
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: setup-mongodb
      - func: setup-docker-host
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - &run-go-test-suite-with-mongodb
    # runs a make target above, but only on systems that have a
    # running mongod started for testing.
    name: test
    must_have_test_results: true
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: setup-mongodb
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - &run-go-test-suite-with-mongodb-useast
    # runs a make target above, but only on systems that have a
    # running mongod started for testing.
    name: test
    must_have_test_results: true
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: setup-mongodb
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}", tz: "America/New_York" }
  - &run-smoke-test
    name: smoke
    commands:
      - command: timeout.update
        params:
          exec_timeout_secs: 900
          timeout_secs: 900
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-mongodb
      - func: run-make
        vars: { target: "set-var" }
      - func: run-make
        vars: { target: "set-project-var" }
      - func: run-make
        vars: { target: "load-smoke-data" }
      - command: subprocess.exec
        params:
          silent: true
          working_dir: gopath/src/github.com/evergreen-ci/evergreen
          command: bash scripts/setup-smoke-config.sh ${github_token}
      - func: run-make
        vars:
          target: set-smoke-vars
      - func: run-make
        vars:
          target: "${task_name}"
  - &version-constants
    nodejs_version: "6.11.1"
  - &run-generate-lint
    name: generate-lint
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: run-make
        vars: { target: "${task_name}" }
      - command: s3.put
        type: system
        params:
          aws_key: fake
          aws_secret: fake
          local_file: gopath/src/github.com/evergreen-ci/evergreen/bin/generate-lint.json
          remote_file: evergreen/${build_id}-${build_variant}/bin/generate-lint.json
          bucket: mciuploads
          content_type: application/json
          permissions: public-read
          display_name: generate-lint.json
      - command: generate.tasks
        params:
          files:
            - gopath/src/github.com/evergreen-ci/evergreen/bin/generate-lint.json
  - mongocryptd_variants: &mongocryptd_variants
    - enterprise-rhel-80-64-bit

  - mh_variants: &mh_variants
    - enterprise-rhel-80-64-bit
#######################################
#              Functions              #
#######################################
functions:
  get-project:
    command: git.get_project
    type: setup
    params:
      directory: gopath/src/github.com/evergreen-ci/evergreen
      token: ${github_token}
      shallow_clone: true
  run-make:
    command: subprocess.exec
    params:
      working_dir: gopath/src/github.com/evergreen-ci/evergreen
      binary: make
      args: ["${make_args|}", "${target}"]
      include_expansions_in_env:
        - MONGO_CREDS_FILE
        - RUN_TEST
      env:
        AWS_KEY: fake
        AWS_SECRET: fake
        DEBUG_ENABLED: ${debug}
        DOCKER_HOST: ${docker_host}
        EVERGREEN_ALL: "true"
        GOARCH: ${goarch}
        GOOS: ${goos}
        GOPATH: ${workdir}/gopath
        GOROOT: ${goroot}
        KARMA_REPORTER: junit
        NODE_BIN_PATH: ${nodebin}
        RACE_DETECTOR: ${race_detector}
        SETTINGS_OVERRIDE: creds.yml
        SMOKE_TEST_FILE: ${smoke_test_file}
        TEST_TIMEOUT: ${test_timeout}
        TZ: ${tz}
        VENDOR_PKG: "github.com/${trigger_repo_owner}/${trigger_repo_name}"
        VENDOR_REVISION: ${trigger_revision}
        XC_BUILD: ${xc_build}

  setup-credentials:
    command: subprocess.exec
    type: setup
    params:
      silent: true
      working_dir: gopath/src/github.com/evergreen-ci/evergreen
      env:
        GITHUB_TOKEN: ${github_token}
        JIRA_SERVER: ${jiraserver}
        CROWD_SERVER: ${crowdserver}
        AWS_KEY: ${aws_key}
        AWS_SECRET: ${aws_secret}
        JIRA_PRIVATE_KEY: ${jira_private_key}
        JIRA_ACCESS_TOKEN: ${jira_access_token}
        JIRA_TOKEN_SECRET: ${jira_token_secret}
        JIRA_CONSUMER_KEY: ${jira_consumer_key}
      command: bash scripts/setup-credentials.sh
  setup-mongodb:
    - command: subprocess.exec
      type: setup
      params:
        env:
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make start-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        command: make check-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make init-rs
  setup-mongodb-auth:
    - command: subprocess.exec
      type: setup
      params:
        env:
          MONGODB_URL: ${mongodb_url}
          DECOMPRESS: ${decompress}
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make get-mongodb
    - command: subprocess.exec
      type: setup
      params:
        background: true
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make start-mongod-auth
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        command: make check-mongod
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make init-rs
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen/
        command: make init-auth

  setup-docker-host:
    - command: host.create
      type: setup
      params:
        distro: archlinux-parent
        provider: ec2
        retries: 3
        scope: build
        security_group_ids:
          - sg-097bff6dd0d1d31d0
    - command: host.list
      type: setup
      params:
        wait: true
        timeout_seconds: 900
        num_hosts: 1
        path: gopath/src/github.com/evergreen-ci/evergreen/spawned_hosts.json
    - command: subprocess.exec
      type: setup
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        command: make parse-host-file
        env:
          HOST_FILE: spawned_hosts.json
          GOROOT: ${goroot}
    - command: expansions.update
      params:
        file: gopath/src/github.com/evergreen-ci/evergreen/bin/expansions.yml

  verify-agent-version-update:
    - command: subprocess.exec
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        binary: bash
        args: ["scripts/verify-agent-version-update.sh"]
        env:
          BRANCH_NAME: ${branch_name}

  verify-merge-function-update:
    - command: subprocess.exec
      params:
        working_dir: gopath/src/github.com/evergreen-ci/evergreen
        binary: bash
        args: ["scripts/verify-merge-function-update.sh"]
        env:
          BRANCH_NAME: ${branch_name}

  attach-test-results:
    - command: gotest.parse_files
      type: system
      params:
        files:
          - "gopath/src/github.com/evergreen-ci/evergreen/bin/output.*"
    - command: attach.xunit_results
      type: system
      params:
        files:
          - "gopath/src/github.com/evergreen-ci/evergreen/bin/jstests/*.xml"
  remove-test-results:
    - command: shell.exec
      type: system
      params:
        shell: bash
        script: |
          set -o xtrace
          rm gopath/src/github.com/evergreen-ci/evergreen/bin/output.*
          rm gopath/src/github.com/evergreen-ci/evergreen/bin/jstests/*.xml
#######################################
#                Tasks                #
#######################################

tasks:
  - <<: *run-build
    name: dist-staging
    patch_only: true
    run_on: archlinux-new-small
  - <<: *run-smoke-test
    name: smoke-test-task
    tags: ["smoke"]
  - <<: *run-smoke-test
    name: smoke-test-endpoints
    tags: ["smoke"]
  - <<: *run-smoke-test
    name: smoke-test-agent-monitor
    tags: ["smoke"]
  - <<: *run-generate-lint
  - <<: *run-go-test-suite
    name: js-test
  - <<: *run-build
    name: dist
  - <<: *run-go-test-suite
    tags: ["nodb", "test"]
    name: test-thirdparty-docker
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-auth
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-rest-route
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-rest-client
  - <<: *run-go-test-suite-with-mongodb
    name: test-rest-model
    tags: ["db", "test"]
  - <<: *run-go-test-suite-with-mongodb
    tags: ["test", "db"]
    name: test-units
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "agent"]
    name: test-agent
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "agent"]
    name: test-agent-internal
  - <<: *run-go-test-suite
    tags: ["nodb", "test", "agent"]
    name: test-agent-internal-client
  - <<: *run-go-test-suite
    tags: ["nodb", "test", "agent"]
    name: test-agent-util
  - <<: *run-go-test-suite-with-mongodb
    tags: ["test", "db", "agent"]
    name: test-agent-command
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-rest-data
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test", "cli"]
    name: test-operations
  - <<: *run-go-test-suite
    tags: ["nodb", "test"]
    name: test-operations-metabuild-generator
  - <<: *run-go-test-suite
    tags: ["nodb", "test"]
    name: test-operations-metabuild-model
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-db
  - <<: *run-go-test-suite-with-docker
    tags: ["db"]
    name: test-cloud
  - <<: *run-go-test-suite
    tags: ["nodb", "test"]
    name: test-cloud-userdata
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-scheduler
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-service
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-evergreen
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-thirdparty
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-trigger
  - <<: *run-go-test-suite
    tags: ["nodb", "test"]
    name: test-util
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-validator
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-alertrecord
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-annotations
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-artifact
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-build
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-event
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-host
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-notification
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-patch
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-pod
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-stats
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-task
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-testresult
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-user
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-distro
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-commitqueue
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-model-manifest
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-plugin
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-migrations
  - <<: *run-go-test-suite-with-mongodb
    tags: ["db", "test"]
    name: test-cmd-codegen-core
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: setup-mongodb
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "${task_name}" }
  - <<: *run-go-test-suite-with-mongodb-useast
    tags: ["db", "test"]
    name: test-graphql
  - name: docker-cleanup
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "test-thirdparty-docker" }
  - name: test-repotracker
    tags: ["db", "test"]
    commands:
      - command: git.get_project
        type: setup
        params:
          directory: gopath/src/github.com/evergreen-ci/evergreen
          token: ${github_token}
          shallow_clone: false
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: setup-mongodb
      - func: run-make
        vars:
          target: revendor
      - func: run-make
        vars: { target: "test-repotracker" }
  - name: upload-clis
    patchable: false
    depends_on:
      - name: dist
        status: success
    commands:
      - command: subprocess.exec
        params:
          binary: make
          args: ["upload-clis"]
          working_dir: gopath/src/github.com/evergreen-ci/evergreen
          env:
            AWS_KEY: ${aws_key}
            AWS_SECRET: ${aws_secret}
            BUCKET_NAME: mciuploads
            LOCAL_PATH: clients
            EXCLUDE_PATTERN: .cache
            REMOTE_PATH: evergreen/clients/${project}/${revision}
            GOPATH: ${workdir}/gopath
            GOROOT: ${goroot}
  - name: verify-agent-version-update
    tags: ["linter"]
    patch_only: true
    commands:
      - func: get-project
      - func: verify-agent-version-update
  - name: verify-mod-tidy
    tags: ["linter"]
    commands:
      - command: git.get_project
        type: setup
        params:
          directory: evergreen
          token: ${github_token}
      - func: run-make
        vars: { target: "${task_name}" }
  - name: verify-merge-function-update
    tags: ["linter"]
    patch_only: true
    commands:
      - func: get-project
      - func: verify-merge-function-update
  - name: test-db-auth
    commands:
      - func: get-project
      - func: run-make
        vars:
          target: get-go-imports
      - func: setup-credentials
      - func: setup-mongodb-auth
      - func: run-make
        vars:
          target: "test-evergreen"
          RUN_TEST: "TestEnvironmentSuite/TestInitDB"
          MONGO_CREDS_FILE: ${workdir}/gopath/src/github.com/evergreen-ci/evergreen/test_auth.yml
  - name: s3copy-test-push
    tags: ["publish"]
    stepback: false
    commands:
      - command: s3Copy.copy
        params:
          aws_key: fake
          aws_secret: fake
          s3_copy_files:
              #Binaries
              - {'optional': true, 'source': {'path': 'something___fake', 'bucket': 'something___fake'},
                'destination': {'path': 'something_fake_6', 'bucket': 'something_fake_6'}}

              # #Shell
              # - {'optional': true, 'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

              # #Cryptd
              # - {'optional': true, 'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
              #   'build_variants': *mongocryptd_variants}

              # # MH
              # - {'optional': true, 'source': {'path': '${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
              #   'build_variants': *mh_variants}

              # #Source tarball
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id_hardcoded}.${ext|tar.gz}', 'bucket': 'build-push-testing'},
              #   'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}', 'bucket': '${push_bucket}'},
              #   'build_variants': ['rhel70', 'windows']}

              # #MSI (Windows only)
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}-signed.msi', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi', 'bucket': '${push_bucket}'},
              #   'build_variants': ['enterprise-windows', 'windows']}

              # #Binaries Signature
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

              # #Shell Signature
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

              # #Cryptd Signature
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'},
              #   'build_variants': *mongocryptd_variants}

              # #Source tarball signature
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id_hardcoded}.${ext|tar.gz}.sig', 'bucket': 'build-push-testing'},
              #   'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig', 'bucket': '${push_bucket}'},
              #   'build_variants': ['rhel70', 'windows']}

              # #SHA1 for binaries
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

              # #SHA1 for shell
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

              # #SHA1 for cryptd
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'},
              #   'build_variants': *mongocryptd_variants}

              # #SHA1 for source tarball
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id_hardcoded}.${ext|tar.gz}.sha1', 'bucket': 'build-push-testing'},
              #   'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1', 'bucket': '${push_bucket}'},
              #   'build_variants': ['rhel70', 'windows']}

              # #SHA1 for MSI
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}-signed.msi.sha1', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1', 'bucket': '${push_bucket}'},
              #   'build_variants': ['enterprise-windows', 'windows']}

              # #SHA256 for binaries
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

              # #SHA256 for shell
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

              # #SHA256 for cryptd
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'},
              #   'build_variants': *mongocryptd_variants}

              # #SHA256 for source tarball
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id_hardcoded}.${ext|tar.gz}.sha256', 'bucket': 'build-push-testing'},
              #   'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256', 'bucket': '${push_bucket}'},
              #   'build_variants': ['rhel70', 'windows']}

              # #SHA256 for MSI files
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}-signed.msi.sha256', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256', 'bucket': '${push_bucket}'},
              #   'build_variants': ['enterprise-windows', 'windows']}

              # #MD5 for binaries
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

              # #MD5 for shell
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

              # #MD5 for cryptd
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'},
              #   'build_variants': *mongocryptd_variants}

              # #MD5 for source tarball
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id_hardcoded}.${ext|tar.gz}.md5', 'bucket': 'build-push-testing'},
              #   'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5', 'bucket': '${push_bucket}'},
              #   'build_variants': ['rhel70', 'windows']}

              # #MD5 for MSIs
              # - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id_hardcoded}-signed.msi.md5', 'bucket': 'build-push-testing'},
              #   'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5', 'bucket': '${push_bucket}'},
              #   'build_variants': ['enterprise-windows', 'windows']}

      # Debug symbols are not created for all variants and the copy is optional.
      # - command: s3Copy.copy
      #   params:
      #     aws_key: fake
      #     aws_secret: fake
      #     optional: true
      #     s3_copy_files:
      #         #Debug Symbols
      #         - {'optional': true, 'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id_hardcoded}.${ext|tgz}', 'bucket': 'build-push-testing'},
      #           'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

      #         #Debug Symbols Signature
      #         - {'optional': true, 'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id_hardcoded}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
      #           'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

      #         #SHA1 for debug symbols
      #         - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
      #           'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

      #         #SHA256 for debugsymbols
      #         - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id_hardcoded}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
      #           'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

      #         #MD5 for debugsymbols
      #         - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id_hardcoded}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
      #           'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}


task_groups:
  - name: dist-and-upload-clis
    max_hosts: 1
    tasks:
      - dist
      - upload-clis

#######################################
#            Buildvariants            #
#######################################
buildvariants:
  - name: ubuntu1604
    display_name: Ubuntu 16.04
    run_on:
      - ubuntu1604-test
      - ubuntu1604-build
    expansions:
      goos: linux
      goarch: amd64
      nodebin: /opt/node/bin
      goroot: /opt/golang/go1.16
      mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1604-4.0.3.tgz
    tasks:
      - name: "dist-and-upload-clis"
      - name: "dist-staging"
      - name: ".smoke"
      - name: ".test"
      - name: "js-test"
      - name: ".linter"
      - name: "docker-cleanup"
      - name: test-db-auth
      - name: test-cloud

  - name: race-detector
    display_name: Race Detector
    run_on:
      - archlinux-new-small
      - archlinux-new-large
    expansions:
      goroot: /opt/golang/go1.16
      mongodb_url: https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.3.tgz
      race_detector: true
      test_timeout: 15m
    tasks:
      - name: ".test"
      - name: test-db-auth

  - name: lint
    display_name: Lint
    run_on:
      - archlinux-new-large
    expansions:
      goroot: /opt/golang/go1.16
    tasks:
      - name: generate-lint

  - name: windows
    display_name: Windows
    run_on:
      - windows-64-vs2017-small
      - windows-64-vs2017-large
    expansions:
      disable_coverage: yes
      goroot: c:/golang/go1.16
      mongodb_url: https://fastdl.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-4.0.3.zip
      extension: ".exe"
      archiveExt: ".zip"
    tasks:
      - name: ".agent .test"
      - name: ".cli .test"

  - name: ubuntu1604-arm64
    display_name: Ubuntu 16.04 ARM
    batchtime: 2880
    run_on:
      - ubuntu1604-arm64-small
    expansions:
      xc_build: yes
      goarch: arm64
      goos: linux
      goroot: /opt/golang/go1.16
      mongodb_url: https://downloads.mongodb.com/linux/mongodb-linux-arm64-enterprise-ubuntu1604-4.0.3.tgz
    tasks:
      - name: ".agent .test"

  - name: osx
    display_name: OSX
    batchtime: 2880
    run_on:
      - macos-1014
    expansions:
      disable_coverage: yes
      goroot: /opt/golang/go1.16
      mongodb_url: https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.3.tgz
    tasks:
      - name: ".agent .test"
      - name: ".cli .test"

  - name: enterprise-rhel-80-64-bit
    display_name: "Enterprise RHEL 8.0"
    modules:
    - enterprise
    run_on:
    - rhel80-small
    expansions: &enterprise-rhel-80-64-bit-expansions
      additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
      push_path: linux
      push_bucket: test-downloads.10gen.com
      push_name: linux
      push_arch: x86_64-enterprise-rhel80
      compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      multiversion_platform: rhel80
      multiversion_edition: enterprise
      has_packages: true
      packager_script: packager_enterprise.py
      packager_arch: x86_64
      packager_distro: rhel80
      repo_edition: enterprise
      scons_cache_scope: shared
      jstestfuzz_num_generated_files: 40
      jstestfuzz_concurrent_num_files: 10
      target_resmoke_time: 10
      max_sub_suites: 3
      large_distro_name: rhel80-medium
      suffix: latest
      task_id_hardcoded: mongodb_mongo_master_enterprise_rhel_80_64_bit_s3copy_test_push_patch_772419f3e25c974d9b96e58f3b837ff4e54acd4c_617a08c03e8e8653d09c7419_21_10_28_02_20_13
    tasks:
    - name: s3copy-test-push

